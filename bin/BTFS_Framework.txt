#if standalone
using SFDGameScriptInterface;
using System;
public partial class ShootoutScriptInterface : GameScriptInterface
{
public ShootoutScriptInterface (IGame game) : base(game) {}
#endif
Shootout.T_Game t_Game = new Shootout.T_Game("Template Game");
public void OnStartup ()
{
t_Game.Start();
if (t_Game.CurrentMode != null) {
t_Game.CurrentMode.StartUp(true);
t_Game.CurrentMode.RunOnStartupPlugins(t_Game.CurrentMode.GetPlugins());
t_Game.CurrentMode.RunOnUpdatePlugins(t_Game.CurrentMode.GetPlugins());
Events.UpdateCallback.Start(OnUpdate, 1);
}
}
public void OnUpdate (float ms) {
OnGameover();
}
public void OnGameover () {
if(Game.IsGameOver && t_Game.CurrentMode != null)
t_Game.CurrentMode.RunOnGameoverPlugins(t_Game.CurrentMode.GetPlugins());
}
public void AfterStartup () {
if (t_Game.CurrentMode != null)
t_Game.CurrentMode.RunAfterStartupPlugins(t_Game.CurrentMode.GetPlugins());
}
public void OnShutdown () {
if (t_Game.CurrentMode != null)
t_Game.CurrentMode.RunOnShutdownPlugins(t_Game.CurrentMode.GetPlugins());
}
}
namespace Shootout
{
using SFDGameScriptInterface;
using System;
using System.Collections.Generic;
public class Callbacks
{
public Callback<IPlayer> OnPlayerDamage;
public Callback<IPlayer> OnPlayerDeath;
public Callback<IPlayer> OnPlayerKeyInput;
public Callback<IPlayer> OnObjectCreated;
}
public class Callback<T>
where T : IObject
{
protected Dictionary<int, List<Delegate>> _routes = new Dictionary<int, List<Delegate>> ();
public void AddRoute (T match, MulticastDelegate target)
{
if (!_routes.ContainsKey (match.UniqueID))
_routes[match.UniqueID] = new List<Delegate> ();
_routes[match.UniqueID].Add (target);
}
public void RemoveRoute (T match, MulticastDelegate target)
{
if (!_routes.ContainsKey (match.UniqueID))
_routes[match.UniqueID].Remove (target);
}
}
public class PlayerDamageCallback : Callback<IPlayer>
{
public void Run (IPlayer player, PlayerDamageArgs args)
{
List<Delegate> route;
if (_routes.TryGetValue (player.UniqueID, out route))
foreach (Action<IPlayer, PlayerDamageArgs> m in route)
m (player, args);
}
public void Stop (IPlayer player, PlayerDamageArgs args)
{
List<Delegate> route;
if (_routes.TryGetValue (player.UniqueID, out route))
foreach (Action<IPlayer, PlayerDamageArgs> m in route)
m (player, args);
}
}
public class UpdateCallback : Callback<IPlayer>
{
List <IPlayer> UpdateObjects = new List <IPlayer> ();
public void Run (float args)
{
List<Delegate> route;
foreach (IPlayer player in UpdateObjects)
{
if (player != null)
{
if (_routes.TryGetValue (player.UniqueID, out route))
{
foreach (Action <IPlayer, float> m in route)
{
m (player, args);
}
}
}
else
{
GameScriptInterface.Game.WriteToConsole ("Failed to update ", player.Name);
}
}
}
public void HandlePlayer (IPlayer player)
{
foreach (IPlayer plr in UpdateObjects)
{
if (plr == player)
{
return;
}
}
if (UpdateObjects.Contains (player) == false)
{
//GameScriptInterface.Game.WriteToConsole (player.Name + " was add to Update cycle!");
UpdateObjects.Add (player);
}
else
{
return;
}
}
}
public class PlayerDeathCallback : Callback<IPlayer>
{
public void Run (IPlayer player, PlayerDeathArgs args)
{
List<Delegate> route;
if (_routes.TryGetValue (player.UniqueID, out route))
foreach (Action<IPlayer, PlayerDeathArgs> m in route)
m (player, args);
}
}
public class PlayerKeyInputCallback : Callback<IPlayer>
{
public void Run (IPlayer player, VirtualKeyInfo[] args)
{
List<Delegate> route;
if (_routes.TryGetValue (player.UniqueID, out route))
foreach (Action<IPlayer, VirtualKeyInfo[]> m in route)
m (player, args);
}
}
}
namespace Shootout
{
using System;
using SFDGameScriptInterface;
public class Character
{
Random random = new Random();
IUser User;
IPlayer Player;
IPlayer OldPlayer;
IProfile Profile;
protected PlayerModifiers Modifiers;
public static SE_Debug CharacterDebug;
#region Character_Data
protected string[] Description = null;
protected Effect[] Skills = null;
protected IProfile[] ProfilePacks = null;
protected WeaponItem[] Weapons = null;
#endregion
#region char_profile
protected Gender _gender;
protected IProfileClothingItem _skin;
protected IProfileClothingItem _head;
protected IProfileClothingItem _chestover;
protected IProfileClothingItem _chestunder;
protected IProfileClothingItem _hands;
protected IProfileClothingItem _waist;
protected IProfileClothingItem _legs;
protected IProfileClothingItem _feet;
protected IProfileClothingItem _accesory;
#endregion
#region char_modifiers
protected int _max_health = 100;
protected int _max_energy = 100;
protected float _current_health = 100;
protected float _current_energy = 100;
protected float _energy_consumption = 1;
protected float _explosion_damage_taken = 1;
protected float _projectile_damage_taken = 1;
protected float _projectile_crit_chance_taken = 1;
protected float _fire_damage_taken = 1;
protected float _melee_damage_taken = 1;
protected float _impact_damage_taken = 1;
protected float _projectile_damage_dealt = 1;
protected float _projectile_crit_chance_dealt = 1;
protected float _melee_damage_dealt = 1;
protected float _melee_force = 1;
protected int _melee_stun_immunity = 1;
protected int _can_burn = 1;
protected float _run_speed = 1;
protected float _sprint_speed = 1;
protected float _energy_recharge = 1;
protected float _size_modifier = 1;
protected int _infinite_ammo = 1;
protected int _item_drop = 1;
protected float _corpse_health = 100;
#endregion
#region char_options
string _name = "Unnamed";
float _time_on_spawn = 0;
int _uniqueID = -1;
int _dead_counter = 0;
CameraFocusMode _focus_mode;
bool _on_start = true;
bool _hide_name = false;
bool _hide_status = false;
bool _wasSpawn = false;
bool _showDialogueOnSpawn = true;
bool _showCharDescription = true;
bool _dead_spawn = false;
PredefinedAIType _predefinedAIType = PredefinedAIType.None;
#endregion
public Character(bool OnStart,
bool HideNickname,
bool HideStatusBar,
string Name,
string[] Description,
CameraFocusMode Mode,
PlayerModifiers Modifiers,
WeaponItem[] Weapons,
Effect[] Skills,
int CorpseHealth = 100,
bool DeadOnSpawn = false) {
this.Profile = new IProfile();
this.Modifiers = new PlayerModifiers();
SetOnStartSpawn(OnStart);
SetName(Name);
SetCameraFocus(Mode);
SetNametagVisible(HideNickname);
SetStatusBarVisible(HideStatusBar);
SetCharDescription(Description);
SetPackModifiers(Modifiers);
SetWeapons(Weapons);
SetEffects(Skills);
SetDeadOnSpawn(DeadOnSpawn);
SetCorpseHealth(CorpseHealth);
}
public void OnCreateCharacter() {
UpdateModifiers();
UpdateProfile();
HandleCameraFocus();
HandleNametagVisible();
HandleStatusBarVisible();
HandleModifiers();
HandleProfile();
ApplyPassiveEffects(Skills);
ShowCharDescription(_showCharDescription);
ShowCharDialogue(_showDialogueOnSpawn);
HandleAIType();
HandleUser();
GiveWeapons();
HandleDeadOnSpawn();
_wasSpawn = true;
}
public void SetUser(IUser user) { User = user; }
public void SetProfile(IProfile profile) { Profile = profile; }
public void SetStatusBarVisible(bool hide_status) { _hide_status = hide_status; }
public void SetNametagVisible(bool hide_name) { _hide_name = hide_name; }
public void SetCorpseHealth(float corpse_health) { _corpse_health = corpse_health; }
public void SetCameraFocus(CameraFocusMode focus_mode) { _focus_mode = focus_mode; }
public void SetTimeOnSpawn(float time) { _time_on_spawn = time; }
public void SetWeapons(WeaponItem[] weapons) { Weapons = weapons; }
public void SetPlayer(IPlayer player) { Player = player; }
public void SetEffects(Effect[] effects) { Skills = effects; }
public void AddPassiveEffects(params Effect[] effects) { Skills = effects; }
public void SetOnStartShowDescription(bool show) { _showCharDescription = show; }
public void SetOnStartSpawn(bool spawn) { _on_start = spawn; }
public void CreateCharDialogue(Color color, float duration) { GameScriptInterface.Game.CreateDialogue(GetName(), color, GetPlayer(), "", duration, false); }
public void SetAIType(PredefinedAIType predefinedAIType) { _predefinedAIType = predefinedAIType; }
public void SetUniqueID(int id) { _uniqueID = id; }
public void SetName(string name) { _name = name; }
public void SetOldPlayer(IPlayer player) { OldPlayer = player; }
public void SetDeadOnSpawn(bool dead_spawn) { _dead_spawn = dead_spawn; }
public void SetCharDescription(params string[] char_description) { this.Description = char_description; }
public void SetOnStartShowDialogue(bool show) { _showDialogueOnSpawn = show; }
public void SetPackModifiers(PlayerModifiers modifiers) { Modifiers = modifiers; }
public void HandleStatusBarVisible() { Player.SetStatusBarsVisible(_hide_status); }
public void HandleNametagVisible() { Player.SetNametagVisible(_hide_name); }
public void HandleCameraFocus() { Player.SetCameraSecondaryFocusMode(_focus_mode); }
public void HandleAIType() { Player.SetBotBehavior(new BotBehavior(true, _predefinedAIType)); }
public void HandleProfile() { Player.SetProfile(Profile); }
public bool GetDeadOnSpawn() { return _dead_spawn; }
public bool CharacterIsDead() { return GetPlayer().IsDead; }
public bool GetOnStartShowDialogue() { return _showDialogueOnSpawn; }
public bool GetOnStartSpawn() { return _on_start; }
public bool WasSpawned() { return _wasSpawn; }
public bool GetOnStartShowDescription() { return _showCharDescription; }
public string GetName() { return _name; }
public float GetTimeOnSpawn() { return _time_on_spawn; }
public int GetDeadCount() { return this._dead_counter; }
public int GetUniqueID() { return _uniqueID; }
public PredefinedAIType GetAIType() { return _predefinedAIType; }
public IPlayer GetOldPlayer() { return this.OldPlayer; }
public IPlayer GetPlayer() { return Player; }
public PlayerModifiers GetModifiers() { return this.Modifiers;}
public IUser GetUser() { return this.User; }
public Effect[] GetEffects() { return Skills; }
//Base character constructor
public Character() {
CharacterDebug = new SE_Debug("Character Debug log (" + _name + ")");
this.Profile = new IProfile();
this.Modifiers = new PlayerModifiers();
}
//Using for creating player base on Character class
public IPlayer CreateCharacter(Vector2 position) {
SetPlayer(GameScriptInterface.Game.CreatePlayer(position));
SetUniqueID(GetPlayer().UniqueID);
OnCreateCharacter();
return this.Player;
}
public void HandleModifiers()
{
Player.SetModifiers(Modifiers);
Player.SetCorpseHealth(_corpse_health);
}
public void HandleDeadOnSpawn() {
if (_dead_spawn == true)
Player.Kill();
}
public void HandleUser() {
Player.SetUser(User);
if (SEE_Game.BotsSupport && User.IsBot) {
PredefinedAIType predefinedAIType = User.BotPredefinedAIType;
Player.SetBotBehavior(new BotBehavior(true, predefinedAIType));
}
}
//Send to user description about character
public void ShowCharDescription(bool show) {
if (show && Description == null && User != null)
SEE_Game.SendMessageToPlayer(User, Color.Red, "YOU ARE " + GetName().ToUpper(), "Character has not description");
if (show && Description != null && User != null)
{
SEE_Game.SendMessageToPlayer(User, Color.Green, "YOU ARE " + GetName().ToUpper());
SEE_Game.SendMessageToPlayer(User, Color.Green, Description);
}
}
public void ShowCharDialogue(bool show) {
if (show == true)
CreateCharDialogue(Color.Red, 2000);
}
public void ApplyPassiveEffects(Effect[] effects) {
foreach (Effect e in effects)
Player.Apply(e);
}
public void GiveWeapons() {
if (Weapons == null)
return;
foreach (WeaponItem weapon in Weapons)
Player.GiveWeaponItem(weapon);
}
public void GiveWeapons(WeaponItem[] weapons) {
foreach (WeaponItem weapon in weapons)
Player.GiveWeaponItem(weapon);
}
public void SetProfileItems(Gender gender,
IProfileClothingItem skin,
IProfileClothingItem head,
IProfileClothingItem chestover,
IProfileClothingItem chestunder,
IProfileClothingItem hands,
IProfileClothingItem waist,
IProfileClothingItem legs,
IProfileClothingItem feet,
IProfileClothingItem accesory) {
_gender = gender;
_skin = skin;
_head = head;
_chestover = chestover;
_chestunder = chestunder;
_hands = hands;
_waist = waist;
_legs = legs;
_feet = feet;
_accesory = accesory;
}
public IProfile CreateProfile(Gender gender,
IProfileClothingItem skin,
IProfileClothingItem head,
IProfileClothingItem chestover,
IProfileClothingItem chestunder,
IProfileClothingItem hands,
IProfileClothingItem waist,
IProfileClothingItem legs,
IProfileClothingItem feet,
IProfileClothingItem accesory) {
var profile = new IProfile() {
Name = _name,
Gender = gender,
Skin = skin,
Head = head,
ChestOver = chestover,
ChestUnder = chestunder,
Hands = hands,
Waist = waist,
Legs = legs,
Feet = feet,
Accesory = accesory,
};
return profile;
}
public void UpdateProfile() {
Profile = CreateProfile(_gender,
_skin,
_head,
_chestover,
_chestunder,
_hands,
_waist,
_legs,
_feet,
_accesory);
}
public void UpdateModifiers() {
Modifiers = CreateModifiers(_max_health,
_max_energy,
_current_health,
_current_energy,
_energy_consumption,
_explosion_damage_taken,
_projectile_damage_taken,
_projectile_crit_chance_taken,
_fire_damage_taken,
_melee_damage_taken,
_impact_damage_taken,
_projectile_damage_dealt,
_projectile_crit_chance_dealt,
_melee_damage_dealt,
_melee_force,
_melee_stun_immunity,
_can_burn,
_run_speed,
_sprint_speed,
_energy_recharge,
_size_modifier,
_infinite_ammo,
_item_drop);
}
public PlayerModifiers CreateModifiers(int max_health,
int max_energy,
float current_health,
float current_energy,
float energy_consumption,
float explosion_damage_taken,
float projectile_damage_taken,
float projectile_crit_chance_taken,
float fire_damage_taken,
float melee_damage_taken,
float impact_damage_taken,
float projectile_damage_dealt,
float projectile_crit_chance_dealt,
float melee_damage_dealt,
float melee_force,
int melee_stun_immunity,
int can_burn,
float run_speed,
float sprint_speed,
float energy_recharge,
float size_modifier,
int infinite_ammo,
int item_drop) {
var modifiers = new PlayerModifiers() {
MaxHealth = max_health,
MaxEnergy = max_energy,
CurrentHealth = current_health,
CurrentEnergy = current_energy,
EnergyConsumptionModifier = energy_consumption,
ExplosionDamageTakenModifier = explosion_damage_taken,
ProjectileDamageTakenModifier = projectile_damage_taken,
ProjectileCritChanceTakenModifier = projectile_crit_chance_taken,
FireDamageTakenModifier = fire_damage_taken,
MeleeDamageTakenModifier = melee_damage_taken,
ImpactDamageTakenModifier = impact_damage_taken,
ProjectileDamageDealtModifier = projectile_damage_dealt,
ProjectileCritChanceDealtModifier = projectile_crit_chance_dealt,
MeleeDamageDealtModifier = melee_damage_dealt,
MeleeForceModifier = melee_force,
MeleeStunImmunity = melee_stun_immunity,
CanBurn = can_burn,
RunSpeedModifier = run_speed,
SprintSpeedModifier = sprint_speed,
EnergyRechargeModifier = energy_recharge,
SizeModifier = size_modifier,
InfiniteAmmo = infinite_ammo,
ItemDropMode = item_drop
};
return modifiers;
}
public void SetModifiers(int max_health,
int max_energy,
float current_health,
float current_energy,
float energy_consumption,
float explosion_damage_taken,
float projectile_damage_taken,
float projectile_crit_chance_taken,
float fire_damage_taken,
float melee_damage_taken,
float impact_damage_taken,
float projectile_damage_dealt,
float projectile_crit_chance_dealt,
float melee_damage_dealt,
float melee_force,
int melee_stun_immunity,
int can_burn,
float run_speed,
float sprint_speed,
float energy_recharge,
float size_modifier,
int infinite_ammo,
int item_drop) {
_max_health = max_health;
_max_energy = max_energy;
_current_health = current_health;
_current_energy = current_energy;
_energy_consumption = energy_consumption;
_explosion_damage_taken = explosion_damage_taken;
_projectile_damage_taken = projectile_damage_taken;
_projectile_crit_chance_taken = projectile_crit_chance_taken;
_fire_damage_taken = fire_damage_taken;
_melee_damage_taken = melee_damage_taken;
_impact_damage_taken = impact_damage_taken;
_projectile_damage_dealt = projectile_damage_dealt;
_projectile_crit_chance_dealt = projectile_crit_chance_dealt;
_melee_damage_dealt = melee_damage_dealt;
_melee_force = melee_force;
_melee_stun_immunity = melee_stun_immunity;
_can_burn = can_burn;
_run_speed = run_speed;
_sprint_speed = sprint_speed;
_energy_recharge = energy_recharge;
_size_modifier = size_modifier;
_infinite_ammo = infinite_ammo;
_item_drop = item_drop;
}
}
}
namespace Shootout
{
using SFDGameScriptInterface;
using System;
public class CommandInterface {
// private IUser [] HandledUsers;
// private string [] Commands;
// public CommandInterface (SEE_Game see_game)
// {
// }
// public void HandleUsers (IUser [] Users) => HandledUsers = Users;
// public void SetCommands (string [] Commands) => this.Commands = Commands;
// public IUser [] GetHandledUsers () => HandledUsers;
// public string [] GetCommands () => Commands;
}
}
namespace Shootout
{
using SFDGameScriptInterface;
public abstract class Effect
{
protected Callbacks _cb;
protected string Name { get; set; }
protected string[] Description { get; set; }
private Character character;
private bool _isOwn = false;
IPlayer _playerOwner;
public Effect(Callbacks cb) { _cb = cb; }
public void HandleCharacter(Character character) { this.character = character; }
public IPlayer GetOwner() {  return _playerOwner; }
public Character GetCharacter() { return this.character; }
public PlayerModifiers GetModifiers() { return _playerOwner.GetModifiers(); }
public bool IsOwn() { return _isOwn; }
public void SetOwner(IPlayer player) {_playerOwner = player; _isOwn = true; }
public void SetModifiers(PlayerModifiers mod) { _playerOwner.SetModifiers(mod); }
public abstract void Activate(IPlayer player);
}
}
namespace Shootout {
using System.Collections.Generic;
using System.Linq;
using System;
using SFDGameScriptInterface;
public class SEE_Game : GameScriptInterface {
// public static IGame Game;
public string Name = "Unnamed";
public static bool EnableToShowInformation;
public static bool BotsSupport = true;
public static bool ShowDialogues = true;
public static bool ShowDescriptions = true;
public static bool ShuffleCharacters = true;
public static Vector2 [] SpawnPoints;
public string [] Description = null;
public string [] Authors = null;
public static int [] Users;
public static readonly string Features;
public string License = "License: GNU LGPL v3";
public Mode [] Modes = null;
public Mode CurrentMode = null;
public static Random random = new Random ();
public SEE_Game (string Name) : base(null)
{
this.Name = Name;
}
public void TryToStartMode (Mode mode)
{
if (mode != null)
{
if (CurrentMode.OnStartup)
{
CurrentMode.StartUp(CurrentMode.OnStartup);
}
}
else
{
GameScriptInterface.Game.ShowChatMessage("Game not contain a mode. Game started with default SFD map type mode.", Color.Green);
}
}
public void SetRandomMode (Mode [] Modes)
{
if (Modes != null)
{
Random random = new Random ();
CurrentMode = Modes[random.Next (0, Modes.Length)];
}
}
public static void OnStartMessages ()
{
GameScriptInterface.Game.ShowPopupMessage (Features, Color.Green);
Events.UpdateCallback.Start((x) => GameScriptInterface.Game.HidePopupMessage(), 7000u, 1);
}
public static void SendMessageToAll (Color color, params string [] message)
{
foreach (string msg in message)
GameScriptInterface.Game.ShowChatMessage (msg, color);
}
public static Vector2 GetCenterOfObject (IObject obj)
{
Vector2 tmp = new Vector2 ();
Area area = obj.GetAABB ();
tmp = area.Center;
return tmp;
}
public static void SendMessageToPlayer (IUser user, Color color, params string [] message)
{
UserMessageCallbackArgs args = new UserMessageCallbackArgs (user, "");
foreach (string msg in message)
{
if (!user.IsBot)
GameScriptInterface.Game.ShowChatMessage (msg, color, args.User.UserIdentifier);
}
}
public static void SendMessageToHost (Color color, params string [] message)
{
foreach(IUser user in GameScriptInterface.Game.GetActiveUsers())
{
UserMessageCallbackArgs args = new UserMessageCallbackArgs (user, "");
foreach (string msg in message)
{
if (user.IsHost)
GameScriptInterface.Game.ShowChatMessage (msg, color, args.User.UserIdentifier);
}
}
}
public static Vector2 GetSpawnPoint (int id) {
return SpawnPoints [id];
}
public void OnStartDescriptions (bool show, Mode mode)
{
foreach (Character character in GetCurrentMode().GetPlayableCharacters())
character.SetOnStartShowDescription (show);
}
public void OnStartDialogues (bool show)
{
foreach (Character character in CurrentMode.GetPlayableCharacters())
character.SetOnStartShowDialogue (show);
}
public IDialogue CreateDialogue (string text, Color color, Vector2 pos, string name, float duration, bool showInChat)
{
return GameScriptInterface.Game.CreateDialogue (text, color, pos, name, duration, showInChat);
}
public void ShowCFTX (string text, IObject obj)
{
GameScriptInterface.Game.PlayEffect ("CFTXT", obj.GetWorldPosition (), text);
}
public void ShowGameEffect (string gameEffectName, IObject obj)
{
GameScriptInterface.Game.PlayEffect (gameEffectName, obj.GetWorldPosition ());
}
public static void SetSpawnPoints ()
{
Users = Global.GenerateRandomArrayNonDuplicate (GameScriptInterface.Game.GetActiveUsers ().Length);
foreach (IObject obj in GameScriptInterface.Game.GetObjectsByName("SpawnPlayer"))
{
Global.Append (SpawnPoints,obj.GetWorldPosition ());
}
}
public void SetDescription (params string [] Description) { this.Description = Description; }
public void SetName (string Name) { this.Name = Name; }
public void SetMode (Mode mode) { this.CurrentMode = mode; }
public void SetAuthors (params string [] Authors) { this.Authors = Authors; }
public Mode GetCurrentMode () {
return CurrentMode;
}
public string GetName () { return this.Name; }
public string [] GetAuthors () { return this.Authors; }
public Mode [] GetModeList () { return this.Modes; }
}
}
namespace Shootout
{
using SFDGameScriptInterface;
namespace Modes
{
public class Template : Mode
{
public Template(string Name, bool Enable) : base(Name, Enable)
{
SetName("Template Mode");
}
public override void StartUp(bool Enable)
{
if (Enable)
{
BTFS_Callbacks.Data.InitializeCallbacks();
}
}
public override bool CheckSettings(object[] Settings)
{
throw new System.NotImplementedException();
}
}
}
}
namespace Shootout
{
using SFDGameScriptInterface;
namespace Modes.BTFS_Callbacks
{
public static class Data
{
public static Callbacks cbs;
public static void InitializeCallbacks ()
{
cbs = new Callbacks();
cbs.OnPlayerDamage = new PlayerDamageCallback ();
cbs.OnPlayerDeath = new PlayerDeathCallback ();
cbs.OnPlayerKeyInput = new PlayerKeyInputCallback ();
cbs.OnObjectCreated = new UpdateCallback ();
StartCallbacks();
}
public static void StartCallbacks()
{
Events.PlayerDamageCallback.Start (((PlayerDamageCallback)cbs.OnPlayerDamage).Run);
Events.PlayerDeathCallback.Start (((PlayerDeathCallback)cbs.OnPlayerDeath).Run);
Events.PlayerKeyInputCallback.Start (((PlayerKeyInputCallback)cbs.OnPlayerKeyInput).Run);
Events.UpdateCallback.Start (((UpdateCallback)cbs.OnObjectCreated).Run);
}
}
}
}
namespace Shootout
{
using SFDGameScriptInterface;
namespace Modes.Characters
{
public static class List
{
public static Character [] Playable = {
};
}
}
}
namespace Shootout
{
namespace Modes.Characters.Data
{
public static class Descriptions
{
}
}
}
namespace Shootout
{
using SFDGameScriptInterface;
namespace Modes.Characters.Data
{
public static class Modifiers
{
}
}
}
namespace Shootout
{
using SFDGameScriptInterface;
namespace Modes.Characters.Data {
}
}
namespace Shootout
{
namespace Modes.Characters.Data {
public static class Skills {
}
}
}
namespace Shootout
{
using SFDGameScriptInterface;
namespace Modes.Characters.Data {
public static class Weapons {
}
}
}
namespace Shootout
{
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using System.Reflection;
using System.Diagnostics;
using SFDGameScriptInterface;
public class T_Game : SEE_Game
{
public T_Game (string Name) : base (Name)
{
Name = "Template Game";
SetDescription (Name + ": ", "This only template for your own modes! You can add your plugins, characters, and skills to game modes!");
CurrentMode = new Modes.Template ("Template Mode", true);
}
public void Start ()
{
long kbAfter1 = GC.GetTotalMemory(false) / (1024 * 1024);
SEE_Game.SendMessageToHost(Color.Green, Description);
SEE_Game.SendMessageToHost(Color.Yellow, string.Format("RAM: {0}", kbAfter1));
}
}
}
namespace Shootout
{
using SFDGameScriptInterface;
using System.Collections.Generic;
using System.Linq;
using System;
public static class Global
{
/* SHOOTOUT MODE: EXTENDED SETTINGS */
public static bool DebugMode = true;
public static bool CloneableChars = false;
public static bool OneAndOnlyMode = false;
public static bool UnstableBuild = true;
// Original author: NearHuscarl
// https://github.com/NearHuscarl/BotExtended/blob/master/src/BotExtended/Library/SharpHelper.cs
#region NearHuscarlCode
public static T StringToEnum<T>(string str) { return (T)Enum.Parse(typeof(T), str); }
public static T[] EnumToArray<T>() { return (T[])Enum.GetValues(typeof(T)); }
public static string EnumToString<T>(T enumVal) { return Enum.GetName(typeof(T), enumVal); }
public static void Timeout(Action callback, uint interval) {Events.UpdateCallback.Start(e => callback.Invoke(), interval, 1);}
public static bool TryParseEnum<T>(string str, out T result) where T : struct, IConvertible
{
result = default(T);
if (!typeof(T).IsEnum)
{
return false;
}
int index = -1;
if (int.TryParse(str, out index))
{
if (Enum.IsDefined(typeof(T), index))
{
// https://stackoverflow.com/questions/10387095/cast-int-to-generic-enum-in-c-sharp
result = (T)(object)index;
}
else
{
return false;
}
}
else
{
if (!Enum.TryParse(str, ignoreCase: true, result: out result))
{
return false;
}
}
return true;
}
#endregion
public static void Shuffle<T> (this Random rng, T[] array)
{
int n = array.Length;
while (n > 1)
{
int k = rng.Next(n--);
T temp = array[n];
array[n] = array[k];
array[k] = temp;
}
}
public static Int32 GetPercent(Int32 b, Int32 a)
{
if (b == 0) return 0;
return (Int32)( a / (b / 100M));
}
public static int[] GenerateRandomArrayNonDuplicate (int length)
{
Random random = new Random();
return Enumerable.Range (0, length).OrderBy(c => random.Next()).ToArray();
}
public static float GetPercentByValue (float current, float maximum)
{
float result = (float) Math.Round ((double) (100 * current) / maximum);
return result;
}
public static double GetPercentByValue (double current, double maximum)
{
double result = Math.Round ((double) (100 * current) / maximum);
return result;
}
public static int GetPercentByValue (int current, int maximum)
{
int result = (int) Math.Round ((double) (100 * current) / maximum);
return result;
}
public static T[] Append<T>(this T[] array, T item)
{
if (array == null)
{
return new T[] { item };
}
T[] result = new T[array.Length + 1];
array.CopyTo(result, 0);
result[array.Length] = item;
return result;
}
}
}
// Author: NearHuscarl
// Link:   https://github.com/NearHuscarl/BotExtended/blob/master/src/BotExtended/Library/Mapper.cs
namespace Shootout
{
using SFDGameScriptInterface;
public static class Mapper
{
public static WeaponItemType GetWeaponItemType(WeaponItem weaponItem)
{
// UPDATE: SFD.Weapons.WeaponDatabase 1.3.4
switch (weaponItem)
{
case WeaponItem.ASSAULT:
case WeaponItem.BAZOOKA:
case WeaponItem.BOW:
case WeaponItem.CARBINE:
case WeaponItem.DARK_SHOTGUN:
case WeaponItem.FLAMETHROWER:
case WeaponItem.GRENADE_LAUNCHER:
case WeaponItem.M60:
case WeaponItem.MP50:
case WeaponItem.SAWED_OFF:
case WeaponItem.SHOTGUN:
case WeaponItem.SMG:
case WeaponItem.SNIPER:
case WeaponItem.TOMMYGUN:
return WeaponItemType.Rifle;
case WeaponItem.FLAREGUN:
case WeaponItem.MACHINE_PISTOL:
case WeaponItem.MAGNUM:
case WeaponItem.PISTOL:
case WeaponItem.PISTOL45:
case WeaponItem.REVOLVER:
case WeaponItem.SILENCEDPISTOL:
case WeaponItem.SILENCEDUZI:
case WeaponItem.UZI:
return WeaponItemType.Handgun;
case WeaponItem.PIPE:
case WeaponItem.CHAIN:
case WeaponItem.WHIP:
case WeaponItem.HAMMER:
case WeaponItem.KATANA:
case WeaponItem.MACHETE:
case WeaponItem.CHAINSAW:
case WeaponItem.KNIFE:
case WeaponItem.BAT:
case WeaponItem.BATON:
case WeaponItem.SHOCK_BATON:
case WeaponItem.LEAD_PIPE:
case WeaponItem.AXE:
case WeaponItem.BASEBALL:
return WeaponItemType.Melee;
case WeaponItem.BOTTLE:
case WeaponItem.BROKEN_BOTTLE:
case WeaponItem.CHAIR:
case WeaponItem.CUESTICK:
case WeaponItem.CUESTICK_SHAFT:
case WeaponItem.FLAGPOLE:
case WeaponItem.PILLOW:
case WeaponItem.SUITCASE:
case WeaponItem.TEAPOT:
case WeaponItem.TRASH_BAG:
case WeaponItem.TRASHCAN_LID:
case WeaponItem.CHAIR_LEG:
return WeaponItemType.Melee;
case WeaponItem.GRENADES:
case WeaponItem.MOLOTOVS:
case WeaponItem.MINES:
case WeaponItem.C4:
case WeaponItem.C4DETONATOR:
case WeaponItem.SHURIKEN:
return WeaponItemType.Thrown;
case WeaponItem.STRENGTHBOOST:
case WeaponItem.SPEEDBOOST:
case WeaponItem.SLOWMO_5:
case WeaponItem.SLOWMO_10:
return WeaponItemType.Powerup;
case WeaponItem.PILLS:
case WeaponItem.MEDKIT:
case WeaponItem.LAZER:
case WeaponItem.BOUNCINGAMMO:
case WeaponItem.FIREAMMO:
case WeaponItem.STREETSWEEPER:
return WeaponItemType.InstantPickup;
default:
return WeaponItemType.NONE;
}
}
public static bool IsMakeshiftWeapon(WeaponItem weaponItem)
{
return weaponItem == WeaponItem.BOTTLE
|| weaponItem == WeaponItem.BROKEN_BOTTLE
|| weaponItem == WeaponItem.CUESTICK
|| weaponItem == WeaponItem.CUESTICK_SHAFT
|| weaponItem == WeaponItem.CHAIR
|| weaponItem == WeaponItem.CHAIR_LEG
|| weaponItem == WeaponItem.FLAGPOLE
|| weaponItem == WeaponItem.PILLOW
|| weaponItem == WeaponItem.SUITCASE
|| weaponItem == WeaponItem.TEAPOT
|| weaponItem == WeaponItem.TRASH_BAG
|| weaponItem == WeaponItem.TRASHCAN_LID;
}
public static ProjectileItem GetProjectile(WeaponItem weaponItem)
{
switch (weaponItem)
{
case WeaponItem.ASSAULT:
return ProjectileItem.ASSAULT;
case WeaponItem.BAZOOKA:
return ProjectileItem.BAZOOKA;
case WeaponItem.BOW:
return ProjectileItem.BOW;
case WeaponItem.CARBINE:
return ProjectileItem.CARBINE;
case WeaponItem.DARK_SHOTGUN:
return ProjectileItem.DARK_SHOTGUN;
case WeaponItem.GRENADE_LAUNCHER:
return ProjectileItem.GRENADE_LAUNCHER;
case WeaponItem.M60:
return ProjectileItem.M60;
case WeaponItem.MP50:
return ProjectileItem.MP50;
case WeaponItem.SAWED_OFF:
return ProjectileItem.SAWED_OFF;
case WeaponItem.SHOTGUN:
return ProjectileItem.SHOTGUN;
case WeaponItem.SMG:
return ProjectileItem.SMG;
case WeaponItem.SNIPER:
return ProjectileItem.SNIPER;
case WeaponItem.TOMMYGUN:
return ProjectileItem.TOMMYGUN;
case WeaponItem.FLAREGUN:
return ProjectileItem.FLAREGUN;
case WeaponItem.MACHINE_PISTOL:
return ProjectileItem.MACHINE_PISTOL;
case WeaponItem.MAGNUM:
return ProjectileItem.MAGNUM;
case WeaponItem.PISTOL:
return ProjectileItem.PISTOL;
case WeaponItem.PISTOL45:
return ProjectileItem.PISTOL45;
case WeaponItem.REVOLVER:
return ProjectileItem.REVOLVER;
case WeaponItem.SILENCEDPISTOL:
return ProjectileItem.SILENCEDPISTOL;
case WeaponItem.SILENCEDUZI:
return ProjectileItem.SILENCEDUZI;
case WeaponItem.UZI:
return ProjectileItem.UZI;
default:
return ProjectileItem.NONE;
}
}
public static WeaponItem GetWeaponItem(ProjectileItem projectileItem)
{
if (projectileItem == ProjectileItem.FLAKCANNON)
return WeaponItem.NONE;
// Game bug: https://www.mythologicinteractiveforums.com/viewtopic.php?f=18&t=4333
if (projectileItem == ProjectileItem.SUB_MACHINEGUN)
return WeaponItem.TOMMYGUN;
return Global.StringToEnum<WeaponItem>(Global.EnumToString<ProjectileItem>(projectileItem));
}
}
}
namespace Shootout {
using System;
using SFDGameScriptInterface;
public abstract class Mode {
public static Callbacks CallbackList;
private string Name;
private string [] Authors = null;
private string [] Description = null;
private object [] Settings = null;
private Character [] Playable = null;
private Character [] NonPlayable = null;
private Character [] Death = null;
private Plugin [] Plugins = null;
public bool OnStartup { get; set; }
public Mode (string Name, bool OnStartup)
{
this.Name = Name;
this.OnStartup = OnStartup;
}
public void StopAllPlugins (Plugin [] Plugins)
{
foreach (Plugin plugin in Plugins)
plugin.Enable = false;
}
public void SetPlayableCharacterrs (params Character [] Characters) {
this.Playable = Characters;
}
public void SetNonPlayableCharacterrs (params Character [] Characters) {
this.NonPlayable = Characters;
}
public void SetDeathCharacterrs (params Character [] Characters) {
this.Death = Characters;
}
public void SetSettings (object [] Settings) {
this.Settings = Settings;
}
public void SetName (string Name) {
this.Name = Name;
}
public void SetAuthors (params string [] Authors) {
this.Authors = Authors;
}
public void SetPlugins (params Plugin [] Plugins) {
this.Plugins = Plugins;
}
public void SetDescription (params string [] Description) {
this.Description = Description;
}
public string GetName () { return this.Name; }
public object [] GetSettings () {return this.Settings;}
public string [] GetDescription () { return this.Description; }
public object [] GetAuthors () { return this.Authors; }
public Plugin [] GetPlugins () { return this.Plugins; }
public Callbacks GetCallbacks () { return Mode.CallbackList; }
public Character [] GetPlayableCharacters () {return this.Playable; }
public abstract void StartUp(bool Start);
public abstract bool CheckSettings (object [] Settings);
#region PluginManipulationRegion
// Add some plugin on start. This function checking type of plugin and add to some category.
public void RunOnStartupPlugins(Plugin [] ActionList)
{
if (ActionList != null && ActionList.Length != 0)
{
foreach (Plugin plg in ActionList)
{
if (plg != null)
plg.OnStartup();
}
} else {
}
}
public void RunAfterStartupPlugins(Plugin [] ActionList)
{
if (ActionList != null && ActionList.Length != 0)
{
foreach (Plugin plg in ActionList)
{
if (plg != null)
plg.AfterStartup();
}
} else {
}
}
public void RunOnShutdownPlugins(Plugin [] ActionList)
{
if (ActionList != null && ActionList.Length != 0)
{
foreach (Plugin plg in ActionList)
{
if (plg != null)
plg.OnShutdown();
}
} else {
}
}
public void RunOnUpdatePlugins(Plugin [] ActionList)
{
if (ActionList != null && ActionList.Length != 0)
{
foreach (Plugin plg in ActionList)
{
if (plg != null)
{
Events.UpdateCallback.Start(plg.OnUpdate, (uint) plg.GetSleepOnUpdate(), plg.GetCyclesOnUpdate());
}
}
} else {
}
}
public void RunOnGameoverPlugins(Plugin [] ActionList)
{
if (ActionList != null && ActionList.Length != 0)
{
foreach (Plugin plg in ActionList)
{
if (plg != null)
plg.OnGameover();
}
} else {
return;
}
}
#endregion
}
}
namespace Shootout
{
using SFDGameScriptInterface;
static class PlayerExtensions
{
public static void Apply (this IPlayer player, Effect effect) { effect.Activate (player);}
public static Character GetCharacter (this IPlayer player)
{
Character temp = null;
foreach (Character tmp in Modes.Characters.List.Playable)
{
if (tmp != null && tmp.GetPlayer () != null)
{
if (tmp.GetPlayer () == player)
{
temp = tmp;
}
}
}
return temp;
}
}
}
namespace Shootout
{
using SFDGameScriptInterface;
using System;
public class Plugin
{
public string Name { get; set; }
public bool Enable { get; set; }
private float OnUpdateSleep = 0;
private ushort OnUpdateCycles = 1;
public string [] Description = null;
public static IGame Game;
public Plugin() {}
public void Information () { SEE_Game.SendMessageToAll(Color.Green, Description); }
public void Information (IUser user){ SEE_Game.SendMessageToPlayer(user, Color.Green, Description); }
public float GetSleepOnUpdate(){ return OnUpdateSleep; }
public ushort GetCyclesOnUpdate () { return OnUpdateCycles; }
public string [] GetDescription () { return Description; }
public void SetSleepOnUpdate (float ms) { OnUpdateSleep = ms; }
public void SetCyclesOnUpdate (ushort c) { OnUpdateCycles = c; }
public void SetDescription (params string [] str) { Description = str; }
public virtual void OnStartup () {}
public virtual void AfterStartup () {}
public virtual void OnShutdown () {}
public virtual void OnUpdate (float ms) {}
public virtual void OnGameover () {}
//         public virtual void OnCharacterSpawn () { } // Specific shootout extended implementation
}
}
namespace Shootout
{
using SFDGameScriptInterface;
using System.Linq;
using System;
using System.Collections.Generic;
public class SE_Debug
{
public string Name { get; set; }
public bool Enable { get; set; }
public static bool HaveWarnings { get; set; }
public static bool HaveErrors { get; set; }
public static int Warnings { get; set; }
List<Tuple<string, Color>> DebugLog = new List<Tuple<string, Color>>();
public SE_Debug(string Name)
{
this.Name = Name;
}
public void AddToLog(string str, Color color)
{
DebugLog.Add(new Tuple<string, Color>(str, color));
}
public void AddToLog(Color color, params string[] str)
{
foreach (string s in str)
DebugLog.Add(new Tuple<string, Color>(s, color));
}
public void AddToLogSuccessful (string str)
{
DebugLog.Add(new Tuple<string, Color>(str, Color.Green));
}
public void AddToLogSuccessful (params string[] str)
{
foreach (string s in str)
{
DebugLog.Add(new Tuple<string, Color>(s, Color.Green));
}
}
public void AddToLogWarning (string str)
{
DebugLog.Add(new Tuple<string, Color>(str, Color.Yellow));
Warnings++;
HaveWarnings = true;
}
public void AddToLogWarning (params string[] str)
{
foreach (string s in str)
{
DebugLog.Add(new Tuple<string, Color>(s, Color.Yellow));
Warnings++;
}
HaveWarnings = true;
}
public void OutputToUser(IUser user)
{
SEE_Game.SendMessageToPlayer(user, Color.Green, "DEBUG OUTPUT: " + Name);
foreach (Tuple<string, Color> tuple in DebugLog)
{
SEE_Game.SendMessageToPlayer(user, tuple.Item2, tuple.Item1);
}
}
public void OutputToHost()
{
SEE_Game.SendMessageToHost(Color.Green, "DEBUG OUTPUT: " + Name);
foreach (Tuple<string, Color> tuple in DebugLog)
{
SEE_Game.SendMessageToHost(tuple.Item2, tuple.Item1);
}
}
}
}
namespace Empty
{
#if standalone
}
#endif
